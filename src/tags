!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGH	ullman_utils.h	/^	const static char *ARGH[N_ARG] = { "-database", "-query", "-sep"};$/;"	m	namespace:ullman
Buffer	common.h	/^typedef std::vector<std::vector<std::string> > Buffer;$/;"	t
COMMON_H	common.h	2;"	d
CXXFLAGS	Makefile	/^CXXFLAGS= -g -pg -O2$/;"	m
DEBUG	ullman_query.cc	3;"	d	file:
DEFAULT	ullman_utils.h	/^		DEFAULT,$/;"	e	enum:ullman::SEP_TYPE
Database	ullman.h	/^	class Database {$/;"	c	namespace:ullman
GRAPH_H	graph.h	2;"	d
Graph	graph.h	/^			explicit Graph() : id(0), _m_nedges(0) {};$/;"	f	class:ullman::Graph
Graph	graph.h	/^			explicit Graph(size_t size) : id(0), _m_nedges(0), _m_vertice(size) {};$/;"	f	class:ullman::Graph
Graph	graph.h	/^	class Graph {$/;"	c	namespace:ullman
Isomorphism	ullman.h	/^			explicit Isomorphism(const char *database, const char *query, const char *sep_type) :$/;"	f	class:ullman::Isomorphism
Isomorphism	ullman.h	/^	class Isomorphism {$/;"	c	namespace:ullman
MATRIX_H	matrix.h	2;"	d
MAX_LENGTH	seperator.cc	/^	static const uint32_t MAX_LENGTH = 1024;$/;"	m	namespace:ullman	file:
Matrix	matrix.h	/^				Matrix<T>() : _m_nrows(0), _m_ncolumns(0), _m_change(true) {};$/;"	f	class:ullman::Matrix
Matrix	matrix.h	/^				Matrix<T>(size_t nrows, size_t ncolumn) :$/;"	f	class:ullman::Matrix
Matrix	matrix.h	/^		class Matrix {$/;"	c	namespace:ullman
N_ARG	ullman_utils.h	/^	const static size_t N_ARG = 3;$/;"	m	namespace:ullman
SEPERATOR_H	seperator.h	2;"	d
SEP_TYPE	ullman_utils.h	/^	enum SEP_TYPE {$/;"	g	namespace:ullman
SEP_TYPE_NCOUNT	ullman_utils.h	/^		SEP_TYPE_NCOUNT$/;"	e	enum:ullman::SEP_TYPE
Seperator	seperator.h	/^		Seperator(const char* token): _m_token(token) {$/;"	f	class:ullman::Seperator
Seperator	seperator.h	/^class Seperator {$/;"	c	namespace:ullman
ULLMAN_ERROR	common.h	/^	ULLMAN_ERROR,$/;"	e	enum:UllmanReturnCode
ULLMAN_H	ullman.h	2;"	d
ULLMAN_NCOUNT	common.h	/^	ULLMAN_NCOUNT$/;"	e	enum:UllmanReturnCode
ULLMAN_SUCCESS	common.h	/^	ULLMAN_SUCCESS,$/;"	e	enum:UllmanReturnCode
ULLMAN_UTILS_H	ullman_utils.h	2;"	d
ULLMAN_WARNING	common.h	/^	ULLMAN_WARNING,$/;"	e	enum:UllmanReturnCode
UllmanReturnCode	common.h	/^enum UllmanReturnCode {$/;"	g
Vertice	graph.h	/^	typedef std::vector<struct vertex_t> Vertice;$/;"	t	namespace:ullman
_m_change	matrix.h	/^				bool _m_change;$/;"	m	class:ullman::Matrix
_m_columns	ullman.h	/^			Matrix<bool> _m_columns;$/;"	m	class:ullman::Isomorphism
_m_columns_used	ullman.h	/^			std::vector<int32_t> _m_columns_used;$/;"	m	class:ullman::Isomorphism
_m_cur_find	ullman.h	/^			bool _m_cur_find;$/;"	m	class:ullman::Isomorphism
_m_cur_graph_id	ullman.h	/^			size_t _m_cur_graph_id;$/;"	m	class:ullman::Isomorphism
_m_cur_query_id	ullman.h	/^			size_t _m_cur_query_id;$/;"	m	class:ullman::Isomorphism
_m_database	ullman.h	/^			Database _m_database;$/;"	m	class:ullman::Isomorphism
_m_edge_label_map	graph.h	/^			std::map<struct edge_label_list_t, std::vector<struct edge_t *> > _m_edge_label_map;$/;"	m	class:ullman::Graph
_m_file_data	ullman.h	/^			const char *_m_file_data;$/;"	m	class:ullman::Isomorphism
_m_file_query	ullman.h	/^			const char *_m_file_query;$/;"	m	class:ullman::Isomorphism
_m_ncolumns	matrix.h	/^				size_t _m_ncolumns, _m_nrows;$/;"	m	class:ullman::Matrix
_m_nedges	graph.h	/^			size_t _m_nedges;$/;"	m	class:ullman::Graph
_m_nrows	matrix.h	/^				size_t _m_ncolumns, _m_nrows;$/;"	m	class:ullman::Matrix
_m_output	ullman.h	/^			std::vector<std::vector<size_t> > _m_output;$/;"	m	class:ullman::Isomorphism
_m_query	ullman.h	/^			Database _m_query;$/;"	m	class:ullman::Isomorphism
_m_seperator	ullman.h	/^			Seperator _m_seperator;$/;"	m	class:ullman::Isomorphism
_m_str	matrix.h	/^				std::string _m_str;$/;"	m	class:ullman::Matrix
_m_token	seperator.h	/^		const char* _m_token;	$/;"	m	class:ullman::Seperator
_m_value	matrix.h	/^				std::vector<std::vector<T> > _m_value;$/;"	m	class:ullman::Matrix
_m_vertex_label_map	graph.h	/^			std::map<int32_t, std::vector<size_t> > _m_vertex_label_map;$/;"	m	class:ullman::Graph
_m_vertice	graph.h	/^			Vertice _m_vertice;$/;"	m	class:ullman::Graph
build_matrix	ullman_build.cc	/^	void Isomorphism::build_matrix(Matrix<bool>& matrix, const Graph& graph)$/;"	f	class:ullman::Isomorphism
build_matrix	ullman_build.cc	/^	void Isomorphism::build_matrix(Matrix<bool>& matrix, size_t nrows, size_t ncolumns)$/;"	f	class:ullman::Isomorphism
c_str	matrix.h	/^		inline const char * Matrix<T>::c_str()$/;"	f	class:ullman::Matrix
clear	graph.h	/^			void clear()$/;"	f	class:ullman::Graph
clear	matrix.h	/^		inline void Matrix<T>::clear()$/;"	f	class:ullman::Matrix
construct_edge_label_map	graph.cc	/^	void Graph::construct_edge_label_map()$/;"	f	class:ullman::Graph
construct_match	ullman_query.cc	/^	bool Isomorphism::construct_match(Graph& query_graph, Graph& entry_graph)$/;"	f	class:ullman::Isomorphism
construct_vertex_label_map	graph.cc	/^	void Graph::construct_vertex_label_map()$/;"	f	class:ullman::Graph
database	ullman_utils.h	/^		char *database;$/;"	m	struct:ullman::parameters_t
dfs_search	ullman_query.cc	/^	void Isomorphism::dfs_search(size_t idx, Matrix<bool> matrix)$/;"	f	class:ullman::Isomorphism
edge_label	graph.h	/^		int32_t edge_label;$/;"	m	struct:ullman::edge_label_list_t
edge_label_list_t	graph.h	/^	struct edge_label_list_t {$/;"	s	namespace:ullman
edge_t	graph.h	/^	struct edge_t {$/;"	s	namespace:ullman
edges	graph.h	/^		std::vector<struct edge_t> edges;$/;"	m	struct:ullman::vertex_t
execute	ullman_init.cc	/^	UllmanReturnCode Isomorphism::execute()$/;"	f	class:ullman::Isomorphism
fill	matrix.h	/^		inline void Matrix<T>::fill(T v)$/;"	f	class:ullman::Matrix
fill	matrix.h	/^		inline void Matrix<T>::fill(size_t nrow, T v)$/;"	f	class:ullman::Matrix
from	graph.h	/^		size_t from;$/;"	m	struct:ullman::edge_t
from_label	graph.h	/^		size_t from_label;$/;"	m	struct:ullman::edge_label_list_t
get	matrix.h	/^		inline T Matrix<T>::get(size_t i, size_t j) const$/;"	f	class:ullman::Matrix
get_edge_label_map	graph.cc	/^	   	Graph::get_edge_label_map()$/;"	f	class:ullman::Graph
get_graph	ullman.h	/^			Graph& get_graph(size_t id) $/;"	f	class:ullman::Database
get_graph	ullman.h	/^			const Graph& get_graph(size_t id) const$/;"	f	class:ullman::Database
get_id	graph.h	/^			size_t get_id() const$/;"	f	class:ullman::Graph
get_narg	ullman_utils.cc	/^	size_t get_narg()$/;"	f	namespace:ullman
get_nedges	graph.h	/^			size_t get_nedges() const$/;"	f	class:ullman::Graph
get_parameters	ullman_utils.cc	/^	size_t get_parameters(struct parameters_t *p_parameters, int argc, char *argv[])$/;"	f	namespace:ullman
get_seperator	ullman_utils.cc	/^	void get_seperator(const struct parameters_t *p_parameters,$/;"	f	namespace:ullman
get_vertex	graph.h	/^			const struct vertex_t& get_vertex(size_t idx) const {$/;"	f	class:ullman::Graph
get_vertex	graph.h	/^			struct vertex_t& get_vertex(size_t idx) {$/;"	f	class:ullman::Graph
get_vertex_label_map	graph.cc	/^	const std::map<int32_t, std::vector<size_t> > Graph::get_vertex_label_map()$/;"	f	class:ullman::Graph
graphs	ullman.h	/^			std::vector<Graph> graphs;$/;"	m	class:ullman::Database
id	graph.h	/^			size_t id;$/;"	m	class:ullman::Graph
id	graph.h	/^		size_t id;		$/;"	m	struct:ullman::vertex_t
id	graph.h	/^		size_t id;$/;"	m	struct:ullman::edge_t
judge	ullman_query.cc	/^	bool Isomorphism::judge(const Matrix<bool>& matrix_c)$/;"	f	class:ullman::Isomorphism
label	graph.h	/^		int32_t label;$/;"	m	struct:ullman::edge_t
label	graph.h	/^		int32_t label;$/;"	m	struct:ullman::vertex_t
main	main.cc	/^int main(int argc, char *argv[])$/;"	f
matrix_a	ullman.h	/^			Matrix<bool> matrix_a;$/;"	m	class:ullman::Isomorphism
matrix_b	ullman.h	/^			Matrix<bool> matrix_b;$/;"	m	class:ullman::Isomorphism
objects	Makefile	/^objects=seperator.o ullman_init.o ullman_utils.o main.o ullman_query.o\\$/;"	m
operator ()	graph.h	/^				bool operator () (const struct vertex_t& vertex_a,$/;"	f	struct:ullman::Graph::sort_vertex_t
operator *	matrix.h	/^		inline Matrix<T> Matrix<T>::operator * (const Matrix<T>& other) const$/;"	f	class:ullman::Matrix
operator <	graph.h	/^		bool operator < (const struct edge_label_list_t& edge_label_list) const $/;"	f	struct:ullman::edge_label_list_t
output	ullman_init.cc	/^	UllmanReturnCode Isomorphism::output()$/;"	f	class:ullman::Isomorphism
parameters_t	ullman_utils.h	/^	struct parameters_t {$/;"	s	namespace:ullman
print_parameters	ullman_utils.cc	/^	void print_parameters(const struct parameters_t *p_parameters)$/;"	f	namespace:ullman
push_graph	ullman.h	/^			void push_graph(const Graph& graph)$/;"	f	class:ullman::Database
query	ullman_query.cc	/^	UllmanReturnCode Isomorphism::query()$/;"	f	class:ullman::Isomorphism
query	ullman_utils.h	/^		char *query;$/;"	m	struct:ullman::parameters_t
read_input	ullman_init.cc	/^	UllmanReturnCode Isomorphism::read_input(const Buffer& buffer, Database& database)$/;"	f	class:ullman::Isomorphism
refine	ullman_query.cc	/^	void Isomorphism::refine(Matrix<bool>& matrix, size_t start)$/;"	f	class:ullman::Isomorphism
resize	graph.h	/^			void resize(size_t s)$/;"	f	class:ullman::Graph
resize	matrix.h	/^		inline void Matrix<T>::resize(size_t size_i, size_t size_j)$/;"	f	class:ullman::Matrix
sep_type	ullman_utils.h	/^		int sep_type;$/;"	m	struct:ullman::parameters_t
seperate	seperator.cc	/^	uint32_t Seperator::seperate(const char* file_path, Buffer& stream) {$/;"	f	class:ullman::Seperator
set	matrix.h	/^		inline void Matrix<T>::set(size_t i, size_t j, T v)$/;"	f	class:ullman::Matrix
set_id	graph.h	/^			void set_id(size_t id) $/;"	f	class:ullman::Graph
set_nedges	graph.h	/^			void set_nedges(size_t size)$/;"	f	class:ullman::Graph
set_vertice	graph.h	/^			void set_vertice(const Vertice& vertice) $/;"	f	class:ullman::Graph
size	graph.h	/^			size_t size() const$/;"	f	class:ullman::Graph
size	matrix.h	/^				std::pair<size_t, size_t> size() const$/;"	f	class:ullman::Matrix
size	ullman.h	/^			size_t size() const $/;"	f	class:ullman::Database
sort	ullman.h	/^			void sort()$/;"	f	class:ullman::Database
sort_vertex	graph.h	/^			} sort_vertex;$/;"	m	class:ullman::Graph	typeref:struct:ullman::Graph::sort_vertex_t
sort_vertex_by_degree	graph.h	/^			void sort_vertex_by_degree() {$/;"	f	class:ullman::Graph
sort_vertex_t	graph.h	/^			struct sort_vertex_t {$/;"	s	class:ullman::Graph
to	graph.h	/^		size_t to;$/;"	m	struct:ullman::edge_t
to_label	graph.h	/^		size_t to_label;$/;"	m	struct:ullman::edge_label_list_t
transposition	matrix.h	/^		inline Matrix<T> Matrix<T>::transposition() const$/;"	f	class:ullman::Matrix
ullman	graph.cc	/^namespace ullman {$/;"	n	file:
ullman	graph.h	/^namespace ullman {$/;"	n
ullman	matrix.h	/^namespace ullman {$/;"	n
ullman	seperator.cc	/^namespace ullman {$/;"	n	file:
ullman	seperator.h	/^namespace ullman {$/;"	n
ullman	ullman.h	/^namespace ullman {$/;"	n
ullman	ullman_build.cc	/^namespace ullman {$/;"	n	file:
ullman	ullman_init.cc	/^namespace ullman {$/;"	n	file:
ullman	ullman_query.cc	/^namespace ullman {$/;"	n	file:
ullman	ullman_utils.cc	/^namespace ullman {$/;"	n	file:
ullman	ullman_utils.h	/^namespace ullman {$/;"	n
usage	ullman_utils.cc	/^	void usage()$/;"	f	namespace:ullman
vertex_t	graph.h	/^	struct vertex_t {$/;"	s	namespace:ullman
